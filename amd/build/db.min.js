define("local_cookiebanner/db",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getDBItem=async function(key){const tx=(await openDB()).transaction("prefs","readonly"),request=tx.objectStore("prefs").get(key);return new Promise(((resolve,reject)=>{request.onsuccess=()=>{var _request$result;return resolve((null===(_request$result=request.result)||void 0===_request$result?void 0:_request$result.value)??null)},request.onerror=()=>reject(request.error)}))},_exports.openDB=openDB,_exports.setDBItem=async function(key,value){const tx=(await openDB()).transaction("prefs","readwrite");return tx.objectStore(STORE_NAME).put({key:key,value:value}),new Promise(((resolve,reject)=>{tx.oncomplete=()=>resolve(),tx.onerror=()=>reject(tx.error)}))};
/**
   * @module local_cookiebanner/db
   * @copyright 2024
   * @license   https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const STORE_NAME="prefs";function openDB(){return new Promise(((resolve,reject)=>{const request=indexedDB.open("local_cookiebanner_db",1);request.onupgradeneeded=function(event){const db=event.target.result;db.objectStoreNames.contains("prefs")||db.createObjectStore("prefs",{keyPath:"key"})},request.onsuccess=()=>resolve(request.result),request.onerror=()=>reject(request.error)}))}}));

//# sourceMappingURL=db.min.js.map