{"version":3,"file":"banner.min.js","sources":["../src/banner.js"],"sourcesContent":["/**\n * @module local_cookiebanner/banner\n * @copyright 2024\n * @license   https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport {getString} from 'core/str';\n\nexport const init = (text, showadvanced, advancedtext) => {\n    if (localStorage.getItem(\"cookieAccepted\") || localStorage.getItem(\"cookieRejected\")) {\n        return Promise.resolve();\n    }\n\n    return Templates.render('local_cookiebanner/banner', text, showadvanced)\n        .then(([html, js]) => {\n            const temp = document.createElement('div');\n            temp.innerHTML = html;\n            const banner = temp.firstElementChild;\n\n            document.body.appendChild(banner);\n            Templates.runTemplateJS(js);\n\n            banner.querySelector(\"#cookie-accept\")?.addEventListener(\"click\", () => {\n                localStorage.setItem(\"cookieAccepted\", \"true\");\n                banner.remove();\n            });\n\n            banner.querySelector(\"#cookie-reject\")?.addEventListener(\"click\", () => {\n                localStorage.setItem(\"cookieRejected\", \"true\");\n                banner.remove();\n            });\n\n            const settingsButton = banner.querySelector(\"#cookie-settings\");\n            if (showadvanced && settingsButton) {\n                settingsButton.addEventListener(\"click\", () => {\n                    ModalFactory.create({\n                        title: getString('modalheader', 'local_cookiebanner'),\n                        body: advancedtext\n                    }).then(modal => {\n                        modal.show();\n                        return;\n                    }).catch(error => {\n                        // eslint-disable-next-line\n                        console.error('Modal creation failed:', error);\n                        return;\n                    });\n                });\n            } else if (settingsButton) {\n                settingsButton.style.display = \"none\";\n            }\n\n            return null;\n        })\n        .catch(error => {\n            // eslint-disable-next-line\n            console.error('Failed to render cookie banner:', error);\n        });\n};\n"],"names":["text","showadvanced","advancedtext","localStorage","getItem","Promise","resolve","Templates","render","then","_ref","html","js","temp","document","createElement","innerHTML","banner","firstElementChild","body","appendChild","runTemplateJS","querySelector","addEventListener","setItem","remove","settingsButton","create","title","modal","show","catch","error","console","style","display"],"mappings":";;;;;oMAUoB,CAACA,KAAMC,aAAcC,eACjCC,aAAaC,QAAQ,mBAAqBD,aAAaC,QAAQ,kBACxDC,QAAQC,UAGZC,mBAAUC,OAAO,4BAA6BR,KAAMC,cACtDQ,MAAKC,4DAAEC,KAAMC,eACJC,KAAOC,SAASC,cAAc,OACpCF,KAAKG,UAAYL,WACXM,OAASJ,KAAKK,kBAEpBJ,SAASK,KAAKC,YAAYH,2BAChBI,cAAcT,kCAExBK,OAAOK,cAAc,0EAAmBC,iBAAiB,SAAS,KAC9DpB,aAAaqB,QAAQ,iBAAkB,QACvCP,OAAOQ,2CAGXR,OAAOK,cAAc,4EAAmBC,iBAAiB,SAAS,KAC9DpB,aAAaqB,QAAQ,iBAAkB,QACvCP,OAAOQ,kBAGLC,eAAiBT,OAAOK,cAAc,2BACxCrB,cAAgByB,eAChBA,eAAeH,iBAAiB,SAAS,4BACxBI,OAAO,CAChBC,OAAO,kBAAU,cAAe,sBAChCT,KAAMjB,eACPO,MAAKoB,QACJA,MAAMC,UAEPC,OAAMC,QAELC,QAAQD,MAAM,yBAA0BA,aAIzCN,iBACPA,eAAeQ,MAAMC,QAAU,QAG5B,QAEVJ,OAAMC,QAEHC,QAAQD,MAAM,kCAAmCA"}