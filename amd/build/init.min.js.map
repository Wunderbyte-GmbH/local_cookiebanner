{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["/**\n * @module local_cookiebanner/init\n * @copyright 2025\n * @license   https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport { getDBItem, setDBItem } from 'local_cookiebanner/db';\n\n/**\n * Initialize cookie banner logic using IndexedDB\n */\nexport const init = async (hascookie, templatedata, loggedin) => {\n    const link = document.getElementById('cookie-settings-link');\n    if (link) {\n        link.addEventListener('click', (e) => {\n            e.preventDefault();\n            require(['local_cookiebanner/banner'], function(banner) {\n                banner.showbanner(templatedata, loggedin);\n            });\n        });\n    }\n\n    const consent = await getDBItem('cookie_consent_remember');\n\n    if (consent === 'settech' && hascookie) {\n        Ajax.call([{\n            methodname: 'local_cookiebanner_delete_username_cookie',\n            args: {}\n        }])[0].then(() => {\n            console.log(\"Moodle username cookie deleted.\");\n            return setDBItem('cookie_consent_remember', 'settech');\n        }).catch(error => {\n            console.error(\"Failed to delete Moodle username cookie:\", error);\n        });\n    }\n\n    if (consent === 'all') {\n        Ajax.call([{\n            methodname: 'local_cookiebanner_set_username_cookie',\n            args: {}\n        }])[0].then(() => {\n            console.log(\"Moodle username cookie set.\");\n            return setDBItem('cookie_consent_remember', 'setall');\n        }).catch(error => {\n            console.error(\"Failed to set Moodle username cookie:\", error);\n        });\n    }\n\n    if (consent === 'tech') {\n        Ajax.call([{\n            methodname: 'local_cookiebanner_delete_username_cookie',\n            args: {}\n        }])[0].then(() => {\n            console.log(\"Moodle username cookie deleted.\");\n            return setDBItem('cookie_consent_remember', 'settech');\n        }).catch(error => {\n            console.error(\"Failed to delete Moodle username cookie:\", error);\n        });\n    }\n};\n"],"names":["async","hascookie","templatedata","loggedin","link","document","getElementById","addEventListener","e","preventDefault","require","banner","showbanner","consent","call","methodname","args","then","console","log","catch","error"],"mappings":";;;;;oJAYoBA,MAAOC,UAAWC,aAAcC,kBAC1CC,KAAOC,SAASC,eAAe,wBACjCF,MACAA,KAAKG,iBAAiB,SAAUC,IAC5BA,EAAEC,iBACFC,QAAQ,CAAC,8BAA8B,SAASC,QAC5CA,OAAOC,WAAWV,aAAcC,sBAKtCU,cAAgB,iBAAU,2BAEhB,YAAZA,SAAyBZ,yBACpBa,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,MACN,GAAGC,MAAK,KACRC,QAAQC,IAAI,oCACL,iBAAU,0BAA2B,cAC7CC,OAAMC,QACLH,QAAQG,MAAM,2CAA4CA,UAIlD,QAAZR,uBACKC,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,MACN,GAAGC,MAAK,KACRC,QAAQC,IAAI,gCACL,iBAAU,0BAA2B,aAC7CC,OAAMC,QACLH,QAAQG,MAAM,wCAAyCA,UAI/C,SAAZR,uBACKC,KAAK,CAAC,CACPC,WAAY,4CACZC,KAAM,MACN,GAAGC,MAAK,KACRC,QAAQC,IAAI,oCACL,iBAAU,0BAA2B,cAC7CC,OAAMC,QACLH,QAAQG,MAAM,2CAA4CA"}